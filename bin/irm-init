#!/usr/bin/env node

var download = require('download-git-repo');
var program = require('commander');
var chalk = require('chalk');
var home = require('user-home');
var shell = require('shelljs');
var inquirer = require('inquirer');
var ora = require('ora');
var tildify = require('tildify');

var exists = require('fs').existsSync;
var path = require('path');
var generate = require('../lib/generate');
var logger = require('../lib/logger');
var checkVersion = require('../lib/check-version');
var { isLocalPath, getTemplatePath } = require('../lib/local-path');

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template');

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ irm-init webpack my-project')
  console.log()
  console.log(chalk.gray('    # create a new project straight from a github template'))
  console.log('    $ irm-init username/repo my-project')
  console.log()
})

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help();

/**
 * Settings.
 */
var template = program.args[0];
var hasSlash = template.indexOf('/') > -1;
var rawName = program.args[1];
var inPlace = !rawName || rawName === '.';
var name = inPlace ? path.relative('../', process.cwd()) : rawName;
var to = path.resolve(rawName || '.');
var clone = program.clone || false;

var tmp = path.join(home, '.CachedTemplates', template.replace(/\//g, '-'))
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}
var cachedTmp = path.join(home, '.CachedTemplates');
if(!exists(cachedTmp)){
  shell.exec('mkdir '+cachedTmp);
}

/**
 * Padding.
 */
console.log();
process.on('exit', function () {
  console.log();
});

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(function (answers) {
    if (answers.ok) {
      run()
    }
  });
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  // check if template is local
  if (isLocalPath(template)) {
    var templatePath = getTemplatePath(template)
    if (exists(templatePath)) {
      generate(name, templatePath, to, function (err) {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    checkVersion(function () {
      if (!hasSlash) {
        // use official templates
        var officialTemplate = 'irm-github/' + template
        downloadAndGenerate(officialTemplate)
      } else {
        downloadAndGenerate(template)
      }
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */
function downloadAndGenerate (template) {
  var spinner = ora('downloading template')
  spinner.start();
  download(template, tmp, { clone: clone }, function (err) {
    spinner.stop();
    console.log();
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim());
    else logger.success('Downloaded "%s".', template)
    generate(name, tmp, to, function (err) {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}
